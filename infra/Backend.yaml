AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  MhPath:
    Type: String
    Default: solutions/malmuth-harville
  TysenPath:
    Type: String
    Default: solutions/tysen
  ApiStackName:
    Type: String
  Timeout:
    Type: Number
    Default: 22
  Environment:
    Type: String
    Default: "dev"
    AllowedValues:
      - dev
      - test
      - prod
Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]
Resources:
  HandlerIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      PayloadFormatVersion: "2.0"
      ApiId: !ImportValue
        "Fn::Sub": "${ApiStackName}-Api"
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${HandlerFunction.Arn}/invocations"
  HandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: arn:aws:iam::145724753995:role/joshua-schoepproject-com-lambda-role
      Runtime: python3.12
      Handler: index.handler
      Timeout: !Ref Timeout
      LoggingConfig:
        ApplicationLogLevel: !If ["IsProd", "INFO", "DEBUG"]
        LogFormat: JSON
        SystemLogLevel: !If ["IsProd", "WARN", "DEBUG"]
      ## TODO: Handle snapstart in prod
      Code:
        ZipFile: >
          def handler(event,context):
            pass

  MalmuthRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !ImportValue
        "Fn::Sub": "${ApiStackName}-Api"
      RouteKey: !Sub "POST /${MhPath}"
      Target: !Join
        - /
        - - integrations
          - !Ref HandlerIntegration
  MalmuthCorsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !ImportValue
        "Fn::Sub": "${ApiStackName}-Api"
      RouteKey: !Sub "OPTIONS /${MhPath}"
      Target: !Join
        - /
        - - integrations
          - !Ref HandlerIntegration
  MalmuthTrigger:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/${MhPath}
        - Api: !ImportValue
            "Fn::Sub": "${ApiStackName}-Api"
  TysenRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !ImportValue
        "Fn::Sub": "${ApiStackName}-Api"
      RouteKey: !Sub "POST /${TysenPath}"
      Target: !Join
        - /
        - - integrations
          - !Ref HandlerIntegration
  TysenCorsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !ImportValue
        "Fn::Sub": "${ApiStackName}-Api"
      RouteKey: !Sub "OPTIONS /${TysenPath}"
      Target: !Join
        - /
        - - integrations
          - !Ref HandlerIntegration
  TysenTrigger:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref HandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub
        - arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/${TysenPath}
        - Api: !ImportValue
            "Fn::Sub": "${ApiStackName}-Api"
Outputs:
  HandlerFunction:
    Value: !Ref HandlerFunction
