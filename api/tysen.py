from random import random
import math
### This method is a heuristic generated by Tysen (username trojanrabbit) on the
## twoplustwo forums

def run_tournament(payouts, inverse_normalized_stacks):
    places = sorted([(random() ** stack, index) for index, stack in enumerate(inverse_normalized_stacks)], reverse=True)
    ordered_payouts = sorted([(index, payouts[placement]) if len(payouts) > placement else (index, 0) for placement, (_, index) in enumerate(places)])
    return [payout for (index, payout) in ordered_payouts]

def run_many_tournaments(payouts, inverse_normalized_stacks, iterations):
    rolling_payouts = run_tournament(payouts, inverse_normalized_stacks)
    for _ in range(iterations):
        new_tournament = run_tournament(payouts, inverse_normalized_stacks)
        for index, result in enumerate(new_tournament):
            rolling_payouts[index] += result
    return [payout / iterations for payout in rolling_payouts]

def calculate(payouts, players):
    average_stack = sum(players) / float(len(players))
    inverse_normalized_stacks = [average_stack / stack for stack in players]
    return run_many_tournaments(sorted(payouts, reverse=True), inverse_normalized_stacks, 10000)

print("\n\nFinal result", calculate([100], [100]))